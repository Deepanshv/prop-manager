rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Properties: Only the owner can read/update/delete. Any authenticated user can create.
    match /properties/{propertyId} {
      allow read, update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
      allow create: if request.auth != null;
    }

    // Files subcollection for properties: Only the owner of the parent property can manage them.
    match /properties/{propertyId}/files/{fileId} {
       allow read, write, delete: if request.auth != null && get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerUid == request.auth.uid;
    }
    
    // Prospects and their files: Not yet implemented, but rules are here as a placeholder.
    // Assuming the same ownership model as properties.
    match /prospects/{prospectId} {
      allow read, update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
      allow create: if request.auth != null;
    }

    match /prospects/{prospectId}/files/{fileId} {
       allow read, write, delete: if request.auth != null && get(/databases/$(database)/documents/prospects/$(prospectId)).data.ownerUid == request.auth.uid;
    }
  }
}
