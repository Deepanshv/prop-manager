rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user can only read and update their own profile document.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
    }

    // --- Properties Collection ---
    match /properties/{propertyId} {
      // ANYONE (even logged-out users) can view or list properties
      // that are explicitly marked as public.
      allow get, list: if resource.data.isListedPublicly == true;

      // ONLY the owner can read their private properties or perform any writes.
      allow read, write: if request.auth.uid == resource.data.ownerUid;

      // Additional security for writes:
      // Ensure that on an update, the owner ID cannot be changed.
      allow update: if request.auth.uid == resource.data.ownerUid
                      && request.resource.data.ownerUid == resource.data.ownerUid;
    }

    // --- Prospects Collection (Strictly Private) ---
    match /prospects/{prospectId} {
      // The owner can read, update, and delete their own prospects.
      allow read, update, delete: if request.auth.uid == resource.data.ownerUid;

      // A user can create a new prospect, but they MUST assign
      // themselves as the owner.
      allow create: if request.resource.data.ownerUid == request.auth.uid;
    }

    // --- Generic Rule for ALL Subcollections (e.g., files, media) ---
    // This single rule protects subcollections under both 'properties' and 'prospects'.
    match /{collection}/{docId}/files/{fileId} {
      // Allow access if the user owns the parent document (the property or prospect).
      allow read, write, delete: if get(/databases/$(database)/documents/$(collection)/$(docId)).data.ownerUid == request.auth.uid;
    }
     match /{collection}/{docId}/media/{mediaId} {
      // Allow access if the user owns the parent document (the property or prospect).
      allow read, write, delete: if get(/databases/$(database)/documents/$(collection)/$(docId)).data.ownerUid == request.auth.uid;
    }
  }
}
