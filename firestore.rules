
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users can only read and write to their own user document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Properties can be managed only by their owner.
    match /properties/{propertyId} {
      // Any authenticated user can view a property if it is publicly listed.
      allow get: if resource.data.isListedPublicly == true;
      
      // The owner can read the full document.
      allow read: if request.auth != null && request.auth.uid == resource.data.ownerUid;
      
      // The owner can delete their own property.
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUid;
      
      // An authenticated user can create a property, but they must set themselves as the owner.
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      
      // The owner of a property can update it. The ownerUid cannot be changed.
      allow update: if request.auth != null && request.auth.uid == resource.data.ownerUid && request.resource.data.ownerUid == resource.data.ownerUid;
    }

    // Prospects can only be managed by their owner.
    match /prospects/{prospectId} {
      allow read, write, delete, create: if request.auth != null && request.auth.uid == resource.data.ownerUid || (request.resource.data.ownerUid == request.auth.uid && request.method == 'create');
    }
    
    // Rules for subcollections (files and media)
    // A user can access files/media if they own the parent property.
    match /properties/{propertyId}/{subcollection}/{documentId} {
        allow read, write, delete: if request.auth != null && get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerUid == request.auth.uid;
    }
  }
}
