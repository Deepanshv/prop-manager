
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // USERS collection
    // Users can read their own profile, create it, and update it.
    // They cannot read other user profiles.
    match /users/{userId} {
      allow read, update: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated();
    }

    // PROPERTIES collection
    // Users can create properties for themselves.
    // They can only read, update, or delete properties they own.
    match /properties/{propertyId} {
      allow read: if isAuthenticated() && (
        resource.data.isListedPublicly == true || // Allow read for public listings
        isOwner(resource.data.ownerUid)             // Or if the user is the owner
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.ownerUid);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.ownerUid);
      
      // Subcollections for properties (files, media)
      match /{allPaths=**} {
        allow read, write: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerUid);
      }
    }
    
    // PROSPECTS collection
    // Users can create prospects for themselves.
    // They can only read, update, or delete prospects they own.
    match /prospects/{prospectId} {
      allow read, update, delete: if isAuthenticated() && isOwner(resource.data.ownerUid);
      allow create: if isAuthenticated() && isOwner(request.resource.data.ownerUid);
      
      // Subcollections for prospects
      match /{allPaths=**} {
        allow read, write: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/prospects/$(prospectId)).data.ownerUid);
      }
    }
  }
}
