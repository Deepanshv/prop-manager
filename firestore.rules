
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only manage their own profile data
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
    }

    // Properties can be read publicly if listed, but only written by the owner.
    match /properties/{propertyId} {
      // Anyone can view a property if it's publicly listed.
      allow get, list: if resource.data.isListedPublicly == true;
      
      // The owner can do anything with their own property documents.
      // This includes reading private properties.
      allow read, write, delete: if request.auth.uid == resource.data.ownerUid;
      
      // Rules for the 'files' subcollection within a property
      match /files/{fileId} {
        // Only the owner of the parent property can access the files.
        allow read, write, delete: if get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerUid == request.auth.uid;
      }
    }

    // Prospects are strictly private and can only be accessed by their owner.
    match /prospects/{prospectId} {
      allow read, write, delete: if request.auth.uid == resource.data.ownerUid;

      // Rules for the 'files' subcollection within a prospect
      match /files/{fileId} {
         // Only the owner of the parent prospect can access the files.
        allow read, write, delete: if get(/databases/$(database)/documents/prospects/$(prospectId)).data.ownerUid == request.auth.uid;
      }
    }

    // Lock down all other documents by default
    // This is not needed as rules are not inherited. A path not covered is implicitly denied.
  }
}
