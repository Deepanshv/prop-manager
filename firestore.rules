
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users can only manage their own profile data.
    match /users/{userId} {
      allow read, update, write: if isOwner(userId);
    }
    
    // For properties, allow public read if 'isListedPublicly' is true.
    // Otherwise, only the owner can read, write, or delete.
    match /properties/{propertyId} {
      allow get, list: if resource.data.isListedPublicly == true;
      allow read, write, delete: if isOwner(resource.data.ownerUid);
      
      // Rules for the 'files' subcollection within a property
      match /files/{fileId} {
        allow read, write, delete: if isOwner(get(/databases/$(database)/documents/properties/$(propertyId)).data.ownerUid);
      }
    }

    // Prospects are strictly private and can only be accessed by their owner.
    match /prospects/{prospectId} {
      allow read, write, delete: if isOwner(resource.data.ownerUid);

      // Rules for the 'files' subcollection within a prospect
      match /files/{fileId} {
        allow read, write, delete: if isOwner(get(/databases/$(database)/documents/prospects/$(prospectId)).data.ownerUid);
      }
    }
    
    // Fallback rule: deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
